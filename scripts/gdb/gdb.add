
%define gdb_version	@gdb_version@
%define gdb_target	@target_alias@

Name:         %{rpmprefix}%{gdb_target}-gdb-collection
Release:      @Release@
License:      GPL/LGPL
Group:        %{rpmgroup}

Packager:     corsepiu@faw.uni-ulm.de and joel@OARcorp.com

Version:      %{gdb_version}
Summary:      gdb for target %{gdb_version}

%if "%{gdb_version}" < "6.0"
Source0:      ftp://ftp.gnu.org/pub/gnu/gdb-%{gdb_version}.tar.gz
Patch0:	      gdb-%{gdb_version}-rtems-base-@gdb_patch_version@.diff
Patch1:	      gdb-%{gdb_version}-rtems-cg-@gdb_patch_version@.diff
Patch2:	      gdb-%{gdb_version}-rtems-rdbg-@gdb_patch_version@.diff
%else
Source0:      ftp://ftp.gnu.org/pub/gnu/gdb-%{gdb_version}.tar.bz2
@PATCH1@
%endif

%if "%{_vendor}" == "redhat"
BuildPreReq:	ncurses-devel
%endif

#
# The original sources are not included in the source RPM.
# If we included them, then the source RPMs for each target
# would duplicate MBs of source unnecessarily.  This is 
# a duplication of over 30 MBs of source for each of
# the more than 10 targets it is possible to build.
#
# You can get them yourself from the Internet and copy them to
# your /usr/src/redhat/SOURCES directory ($RPM_SOURCE_DIR).
# Or you can try the ftp options of rpm :-)
#
%{?!_with_sources:NoSource:      0}

#  Account as best possible for targets without simulators
#  and targets which require extra arguments.
%define _sim	1

%if "%{gdb_target}" == "m68k-rtems@osversion@"
%define _sim	0
%endif
%if "%{gdb_target}" == "i386-rtems@osversion@"
%define _sim	0
%endif


%description
RTEMS is an open source operating system for embedded systems.

This is the GNU gdb for RTEMS targetting %{gdb_version}.

%prep
%setup -c -T -n %{name}-%{version} -a0

cd gdb-%{gdb_version}
%{?PATCH0:%patch0 -p1}
%{?PATCH1:%patch1 -p1}
%{?PATCH2:%patch2 -p1}
cd ..

%build
%if "%_sim" == "1"
 simargs="--enable-sim"
%endif

%if "%{gdb_target}" == "powerpc-rtems@osversion@"
 simargs="$simargs --enable-sim-timebase --enable-sim-hardware"
 #  Enabling this causes the program image to be huge and causes
 #  some gcc/hosts combinations to run out of memory.
 # simargs="$simargs --enable-sim-inline"
%endif

test -d build || mkdir build
  cd build
  export PATH="%{_bindir}:${PATH}"
  ../gdb-%{gdb_version}/configure \
    --build=%_build --host=%_host \
    --target=%{gdb_target} \
    --verbose --prefix=%{_prefix} $simargs \
    --disable-nls

  make all
  make info

%install
  cd build
  make prefix=$RPM_BUILD_ROOT%{_prefix} install
  make prefix=$RPM_BUILD_ROOT%{_prefix} install-info

  # host files
  rm -rf $RPM_BUILD_ROOT%{_prefix}/include/*.h
  rm -rf $RPM_BUILD_ROOT%{_prefix}/lib/lib*a

  # These come from other packages
  rm -rf $RPM_BUILD_ROOT%{_prefix}/info/bfd*
  rm -rf $RPM_BUILD_ROOT%{_prefix}/info/configure*
  rm -rf $RPM_BUILD_ROOT%{_prefix}/info/standards*
 
  # gzip info files
  gzip -f $RPM_BUILD_ROOT%{_prefix}/info/*.info 2>/dev/null
  gzip -f $RPM_BUILD_ROOT%{_prefix}/info/*.info-? 2>/dev/null
%if "%{gdb_version}" < "6.0"
  gzip -f $RPM_BUILD_ROOT%{_prefix}/info/*.info-?? 2>/dev/null
%endif

  # We don't ship info/dir
  rm -f $RPM_BUILD_ROOT%{_prefix}/info/dir
