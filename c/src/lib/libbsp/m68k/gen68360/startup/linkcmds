/*
 * This file contains GNU linker directives for a generic MC68360 board.
 * Variations in memory size and allocation can be made by
 * overriding some values with linker command-line arguments.
 *
 * Saskatchewan Accelerator Laboratory
 * University of Saskatchewan
 * Saskatoon, Saskatchewan, CANADA
 * eric@skatter.usask.ca
 * 
 *  $Id$
 */

/*
 * Declare some sizes.
 */
HeapSize = DEFINED(HeapSize) ? HeapSize : 0x10000;
StackSize = DEFINED(StackSize) ? StackSize : 0x1000;

/*
 * Declare on-board memory.
 */
MEMORY {
          ram : ORIGIN = 0x00000000, LENGTH = 64M
          rom : ORIGIN = 0x0F000000, LENGTH = 1M
        dpram : ORIGIN = 0x0E000000, LENGTH = 8k
}

/*
 * Load objects
 */
SECTIONS {
        /*
         * Boot PROM
         */
        rom : {
                _RomBase = .;
        } >rom

        /*
         * Dynamic RAM
         */
        ram : {
                _RamBase = .;
        } >ram

        /*
         * Text, data and bss segments
         */
        .text : {
                *(.text)

		/*
		 * C++ constructors/destructors
		 */
		*(.gnu.linkonce.t.*)

		/*
		 * Initialization and finalization code.
     		 *
     		 * Various files can provide initialization and finalization
		 * functions.  crtbegin.o and crtend.o are two instances. The
		 * body of these functions are in .init and .fini sections. We
		 * accumulate the bodies here, and prepend function prologues
		 * from crti.o and function epilogues from crtn.o. crti.o must
		 * be linked first; crtn.o must be linked last.  Because these
		 * are wildcards, it doesn't matter if the user does not
		 * actually link against crti.o and crtn.o; the linker won't
		 * look for a file to match a wildcard.  The wildcard also
		 * means that it doesn't matter which directory crti.o and
		 * crtn.o are in. 
		 */
		PROVIDE (_init = .);
		*crti.o(.init)
		*(.init)
		*crtn.o(.init)
		PROVIDE (_fini = .);
		*crti.o(.fini)
		*(.fini)
		*crtn.o(.fini)

		/*
		 * C++ constructors/destructors
     		 *
     		 * gcc uses crtbegin.o to find the start of the constructors
		 * and destructors so we make sure it is first.  Because this
		 * is a wildcard, it doesn't matter if the user does not
		 * actually link against crtbegin.o; the linker won't look for
		 * a file to match a wildcard.  The wildcard also means that
		 * it doesn't matter which directory crtbegin.o is in. The
		 * constructor and destructor list are terminated in
		 * crtend.o.  The same comments apply to it.
		 */
		. = ALIGN (16);
		*crtbegin.o(.ctors)
		*(.ctors)
		*crtend.o(.ctors)
		*crtbegin.o(.dtors)
		*(.dtors)
		*crtend.o(.dtors)

		/*
		 * Exception frame info
		 */
		. = ALIGN (16);
		*(.eh_frame)

		/*
		 * Read-only data
		 */
		. = ALIGN (16);
		_rodata_start = . ;
		*(.rodata)
		*(.gnu.linkonce.r*)

                 . = ALIGN (16);
                PROVIDE (etext = .);
        } >ram
        .data : {
                copy_start = .;
                *(.data)
		*(.gnu.linkonce.d*)
		*(.gcc_except_table)
                . = ALIGN (16);
                PROVIDE (_edata = .);
                copy_end = .;
        } >ram
        .bss : {
                M68Kvec = .;
                _M68Kvec = .;
                . += (256 * 4);
                clear_start = .;
                *(.bss)
                *(COMMON)
                . = ALIGN (16);
                PROVIDE (end = .);

                . += StackSize;
                PROVIDE (_stack_init = .);

                . = ALIGN (16);
                PROVIDE (_HeapStart = .);
                . += HeapSize;
                PROVIDE (_HeapEnd = .);

                clear_end = .;

                _WorkspaceBase = .;
        } >ram

        /*
         * On-chip memory/peripherals
         */
        dpram : {
                m360 = .;
                _m360 = .;
                . += (8 * 1024);

        } >dpram
}
