/*
 *  This file contains directives for the GNU linker which are specific
 *  to the Papyrus.
 *
 *  $Id$
 */

OUTPUT_FORMAT("elf32-powerpc", "elf32-powerpc",
              "elf32-powerpc")
OUTPUT_ARCH(powerpc)
 SEARCH_DIR(/usr/local/powerpc-rtems/lib);
 
ENTRY(download_entry)
 
MEMORY
  {
        RAM : ORIGIN = 0, LENGTH = 4M
        FLASH : ORIGIN = 0xFF000000, LENGTH = 0x80000
        EPROM : ORIGIN = 0xFFFE0000, LENGTH = 0x20000
  }
 
/* Do we need any of these for elf?
   __DYNAMIC = 0;    */

SECTIONS
{
  .vectors 0x0100 :
  {
    *(.vectors)
  }
 
  .text 0x20000 :
  {
     *(.entry)
     *(.entry2)
     *(.text)
     *(.rodata)
     *(.gnu.linkonce.r*)
     *(.rodata1)
     *(.descriptors)
     *(rom_ver)
     etext = ALIGN(0x10);
     _etext = .;

     __CTOR_LIST__ = .;
     LONG((__CTOR_END__ - __CTOR_LIST__) / 4 - 2)
     *(.ctors)
     LONG(0)
     __CTOR_END__ = .;

     __DTOR_LIST__ = .;
     LONG((__DTOR_END__ - __DTOR_LIST__) / 4 - 2)
     *(.dtors)
     LONG(0)
     __DTOR_END__ = .;

     *(.lit)
     *(.shdata)
     _init = .; *(.init)
     _fini = .; *(.fini)
     _endtext = .;
  } > RAM
 
  /* R/W Data */
  .data :
  {
    *(.data)
    *(.data1)
    PROVIDE (__SDATA_START__ = .);
    *(.sdata)
  } > RAM
 
  PROVIDE (__EXCEPT_START__ = .);
  .gcc_except_table   : { *(.gcc_except_table) } >RAM
  PROVIDE (__EXCEPT_END__ = .);
  __GOT_START__ = .;
  .got :
  {
     s.got = .;
     *(.got.plt) *(.got)
  } > RAM
  __GOT_END__ = .;

  .got1		  : { *(.got1) 		} >RAM
  PROVIDE (__GOT2_START__ = .);
  PROVIDE (_GOT2_START_ = .);
  .got2		  :  { *(.got2) 	} >RAM
  PROVIDE (__GOT2_END__ = .);
  PROVIDE (_GOT2_END_ = .);

  PROVIDE (__FIXUP_START__ = .);
  PROVIDE (_FIXUP_START_ = .);
  .fixup	  : { *(.fixup) 	} >RAM
  PROVIDE (_FIXUP_END_ = .);
  PROVIDE (__FIXUP_END__ = .);
 
  PROVIDE (__SDATA2_START__ = .);
  .sdata2   	  : { *(.sdata2) 	} >RAM
  .sbss2   	  : { *(.sbss2) 	} >RAM
  PROVIDE (__SBSS2_END__ = .);

  .sbss2   	  : { *(.sbss2) 	} >RAM
  PROVIDE (__SBSS2_END__ = .);

  __SBSS_START__ = .;
  .bss :
  {
    bss.start = .;
    *(.bss) *(.sbss) *(COMMON)
    bss.end = ALIGN(4);
  } > RAM
  __SBSS_END__ = .;
 
  bss.size = bss.end - bss.start;
  PROVIDE(_end = bss.end);


  /* Stabs debugging sections.  */
  .stab 0 : { *(.stab) }
  .stabstr 0 : { *(.stabstr) }
  .stab.excl 0 : { *(.stab.excl) }
  .stab.exclstr 0 : { *(.stab.exclstr) }
  .stab.index 0 : { *(.stab.index) }
  .stab.indexstr 0 : { *(.stab.indexstr) }
  .comment 0 : { *(.comment) }

  /* DWARF debug sections.
     Symbols in the DWARF debugging sections are relative to the beginning
     of the section so we begin them at 0.  */
  /* DWARF 1 */
  .debug          0 : { *(.debug) }
  .line           0 : { *(.line) }
  
  /* GNU DWARF 1 extensions */
  .debug_srcinfo  0 : { *(.debug_srcinfo) }
  .debug_sfnames  0 : { *(.debug_sfnames) }
  
  /* DWARF 1.1 and DWARF 2 */
  .debug_aranges  0 : { *(.debug_aranges) }
  .debug_pubnames 0 : { *(.debug_pubnames) }
  
  /* DWARF 2 */
  .debug_info     0 : { *(.debug_info) }
  .debug_abbrev   0 : { *(.debug_abbrev) }
  .debug_line     0 : { *(.debug_line) }
  .debug_frame    0 : { *(.debug_frame) }
  .debug_str      0 : { *(.debug_str) }
  .debug_loc      0 : { *(.debug_loc) }
  .debug_macinfo  0 : { *(.debug_macinfo) }
  
  /* SGI/MIPS DWARF 2 extensions */
  .debug_weaknames 0 : { *(.debug_weaknames) }
  .debug_funcnames 0 : { *(.debug_funcnames) }
  .debug_typenames 0 : { *(.debug_typenames) }
  .debug_varnames  0 : { *(.debug_varnames) }
  /* These must appear regardless of  .  */
}


