#
#  Config file for VEGAPLUS ARM BOARD --
#
#  $Id$
#

include $(RTEMS_ROOT)/make/custom/default.cfg

RTEMS_CPU=arm
RTEMS_CPU_MODEL=arm7tdmi
#RTEMS_PPC_EXCEPTION_PROCESSING_MODEL=new

# This is the actual bsp directory used during the build process.
RTEMS_BSP_FAMILY=vegaplus

#  This section makes the target dependent options file.

#  NDEBUG (C library)
#     if defined asserts do not generate code.  This is commonly used
#     as a command line option.
#
#  RTEMS_TEST_NO_PAUSE (RTEMS tests)
#     do not pause between screens of output in the rtems tests
#
#  RTEMS_DEBUG (RTEMS)
#     If defined, debug checks in RTEMS and support library code are enabled.
#

define make-target-options
	@echo "/* #define NDEBUG 1 */ "                        >>$@
	@echo "#define RTEMS_TEST_NO_PAUSE 1"                  >>$@
	@echo "/* #define RTEMS_DEBUG  1 */"                   >>$@
endef

#  This contains the compiler options necessary to select the CPU model
#  and (hopefully) optimize for it. 
#
# NOTE : cheking egcc 1.1.1 source code shows that the last know processor 
# is the 604 model and that this is the default generation option.
#
#CPU_CFLAGS = -mcpu=arm7tdmi
CPU_CFLAGS =

# optimize flag: typically -0, could use -O4 or -fast
# -O4 is ok for RTEMS
# NOTE2: some level of -O may be actually required by inline assembler (at least
# -O2 so far.
# NOTE2 Apparently nobody really knows the status or r2 and r13.
# As far as I know, small data are pointer impose a very specific compliation
# model => not used.
# Currently the sdata2 and sbss2 sections are empty => r2 is not used...
CFLAGS_OPTIMIZE_V=
#CFLAGS_OPTIMIZE_V=-O4 -mmultiple -mstring -mstrict-align
#CFLAGS_OPTIMIZE_V=-O4 -fno-keep-inline-functions -fvolatile-global -fvolatile -mstrict-align -mcpu=750

# debug flags: typically none, but at least -O1 is required due to this
# BSP using inlined code
CFLAGS_DEBUG_V = -O1
#CFLAGS_DEBUG_V = -O1 -mmultiple -mstring -mstrict-align


# The following is a ld command file which works without using the
# -specs system in gcc 2.8.  IT HAS NEVER BEEN TESTED WITH THIS BSP!!!
#       $(LD) $(XLDFLAGS) -T $(LINKCMDS) \
#         -o $@ -u atexit -u __vectors -u download_entry $(LINK_FILES)
#       $(LD) $(XLDFLAGS) -Ttext 0x20000 \
#         -o $@ -u atexit -u __vectors -u download_entry $(LINK_FILES)

#       $(CC) -mmvme -mrtems -nostartfiles -mcpu=603 \
#           -o $(basename $@).exe -L $(PROJECT_RELEASE)/lib \
#            $(START_FILE) $(LINK_OBJS) \
#            $(LD_LIBS) \
#           -Wl,-\( -Wl,-lc -Wl,-lrtemsall -Wl,-lgcc -Wl,-\)

define make-exe
	$(CC) -v -static -Wl,-Map -Wl,Mapfile -Wl,-T -Wl,linkcmds -Wl,-N -o $(basename $@).obj $(LINK_OBJS) $(LINK_LIBS)
#	$(LINK.c) $(LDLIBS) -o $@ $(LINK_OBJS) $(LINK_LIBS)
	$(OBJCOPY) -O binary \
	    --only-section=.text \
	    --only-section=.data \
	    --only-section=.rodata \
	    --strip-unneeded $(basename $@).obj $(basename $@).bin
	$(NM) -g -n $(basename $@).obj > $(basename $@).num
	$(SIZE) $(basename $@).obj
	test -d ${PROJECT_RELEASE}/bin || mkdir ${PROJECT_RELEASE}/bin
	f=`basename $@ .exe`; \
	cp $(basename $@).bin  $(basename $@).exe
	cp $(basename $@).bin  ${PROJECT_RELEASE}/bin/$${f}$(LIB_VARIANT).exe

endef

# Miscellaneous additions go here

# Let the HWAPI know which set of drivers to build
#DRIVER_ARCHITECTURE=compactpci
