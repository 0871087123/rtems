#
#  gensh1.cfg
#
#  default configuration for Hitachi sh1 processors
#
#  Author: Ralf Corsepius (corsepiu@faw.uni-ulm.de)
#
#  $Id$
#

include $(RTEMS_ROOT)/make/custom/default.cfg

RTEMS_CPU=sh
RTEMS_CPU_MODEL=sh7032

# This is the actual bsp directory used during the build process.
RTEMS_BSP_FAMILY=gensh1

#
#  This contains the compiler options necessary to select the CPU model
#  and (hopefully) optimize for it.
#
CPU_CFLAGS=-m1

# Use the LIBC support for CYGNUS newlib
# RTEMS_LIBC_DIR must already be set 
RTEMS_USE_NEWLIB=yes

# Define this to yes if this target supports multiprocessor environments.
HAS_MP=no

# This target does NOT support the KA9Q TCP/IP stack so ignore requests
# to enable it.
HAS_KA9Q=no

# Define this for posix support
HAS_POSIX_API=yes

# debug flags: typically none, but we use -O1 as it produces better code
CFLAGS_DEBUG_V = -O1

# optimize flag: typically -0, could use -O4 or -fast
# -O4 is ok for RTEMS
CFLAGS_OPTIMIZE_V = -O4 

#  This section makes the target dependent options file.

#  NDEBUG (C library)
#     if defined asserts do not generate code.  This is commonly used
#     as a command line option.
#
#  RTEMS_TEST_NO_PAUSE (RTEMS tests)
#     do not pause between screens of output in the rtems tests
#
#  STACK_CHECKER_ON (RTEMS support code)
#     If defined, stack bounds checking is enabled.
#
#  STACK_CHECKER_REPORT_USAGE (RTEMS support code)
#     If this and STACK_CHECKER_ON are defined, then a report on stack usage
#     per task is printed when the program exits.
#
#  RTEMS_DEBUG (RTEMS)
#     If defined, debug checks in RTEMS and support library code are enabled.
#

define make-target-options
	@echo "/* #define NDEBUG 1 */ "                     >>$@
	@echo "#define RTEMS_TEST_NO_PAUSE 1"               >>$@
	@echo "/* #define STACK_CHECKER_ON  1 */"           >>$@
	@echo "/* #define STACK_CHECKER_REPORT_USAGE  1 */" >>$@
	@echo "/* #define RTEMS_DEBUG  1 */"                >>$@
endef


# The following are definitions of make-exe which will work using ld as
# is currently required.  It is expected that as of gcc 2.8, the end user
# will be able to override parts of the compilers specs and link using gcc.
#	    -T$(PROJECT_RELEASE)/lib/linkcmds $(LINK_FILES) -lrtemsall -lc $(LD_PATHS:%=-L %)

ifeq ($(RTEMS_USE_GCC272),yes)
define make-exe
	$(CC) $(LDFLAGS) -nostdlib -o $(basename $@).exe \
	-T$(PROJECT_RELEASE)/lib/linkcmds $(LINK_FILES) $(LD_PATHS:%=-L %)
	$(NM) -n $(basename $@).exe > $(basename $@).num
	$(SIZE) $(basename $@).exe
endef
else
define make-exe
	$(CC) -Wl,-Map,$(basename $@).map $(CFLAGS) \
	     -o $(basename $@).exe $(LINK_OBJS)
	$(NM) -n $(basename $@).exe > $(basename $@).num
	$(SIZE) $(basename $@).exe
endef
endif

# Miscellaneous additions go here

# Workaround for missing ranlib support in rtems
MKLIB=$(RANLIB) 
