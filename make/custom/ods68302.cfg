#
#  Config file for a "ODS 68302" BSP
#
#  Differs from the gen68302 by providing most of the boot code as C
#  code. This allows separate board definitions to be based on C
#  header files. The file is based on the VARIANT defined.
#
#  $Id$
#

include $(RTEMS_ROOT)/make/custom/default.cfg

RTEMS_CPU=m68k
RTEMS_CPU_MODEL=m68302

# This is the actual bsp directory used during the build process.
RTEMS_BSP_FAMILY=ods68302

#
#  This contains the compiler options necessary to select the CPU model
#  and (hopefully) optimize for it. 
#
CPU_CFLAGS=-g -m68302 -msoft-float \
                -DVARIANT=$(BSP_VARIANT) -DMC68302_BASE=$(MC68302_BASE) \
                -DRAM_BASE=$(RAM_BASE) -DRAM_SIZE=$(RAM_SIZE) \
                -DROM_BASE=$(ROM_BASE) -DROM_SIZE=$(ROM_SIZE)

# optimize flag: typically -0, could use -O4 or -fast
# -O4 is ok for RTEMS
CFLAGS_OPTIMIZE_V=-O4 -fomit-frame-pointer

# debugging please
CFLAGS_DEBUG_V+=-g

# This target does not support the ka9q tcp/ip stack so ignore requests
# to enable it.
HAS_KA9Q=no

# Define this to yes if C++ is included in the development environment.
# This requires that at least the GNU C++ compiler and libg++ be installed.
ifeq ($(RTEMS_HAS_CPLUSPLUS),yes)
HAS_CPLUSPLUS=yes
# no standard C++ libs provided by default
#LIBCC_INCLUDE=/usr/include/g++
#CPLUS_LD_LIBS=-lstdc++ -lrtems++
CPLUS_LD_LIBS=$(PROJECT_RELEASE)/lib/librtems++$(LIBSUFFIX_VA)
else
HAS_CPLUSPLUS=no
endif

START_BASE=start302

#  This section makes the target dependent options file.

#  NDEBUG (C library)
#     if defined asserts do not generate code.  This is commonly used
#     as a command line option.
#
#  RTEMS_TEST_NO_PAUSE (RTEMS tests)
#     do not pause between screens of output in the rtems tests
#
#  STACK_CHECKER_ON (RTEMS support code)
#     If defined, stack bounds checking is enabled.
#
#  STACK_CHECKER_REPORT_USAGE (RTEMS support code)
#     If this and STACK_CHECKER_ON are defined, then a report on stack usage
#     per task is printed when the program exits.
#
#  RTEMS_DEBUG (RTEMS)
#     If defined, debug checks in RTEMS and support library code are enabled.

define make-target-options
	@echo "/* #define NDEBUG 1 */ "                     >>$@
	@echo "#define RTEMS_TEST_NO_PAUSE 1"               >>$@
	@echo "/* #define STACK_CHECKER_ON  1 */"           >>$@
	@echo "/* #define STACK_CHECKER_REPORT_USAGE  1 */" >>$@
	@echo "#define RTEMS_DEBUG  1"                >>$@
endef

# The following are definitions of make-exe which will work using ld as
# is currently required.  It is expected that as of gcc 2.8, the end user
# will be able to override parts of the compilers specs and link using gcc.

ifeq ($(RTEMS_USE_GCC272),yes)

# override default location of Standard C Library
LIBC_LIBC=$(RTEMS_LIBC_DIR)/lib/m68000/libc.a
LIBC_LIBM=$(RTEMS_LIBC_DIR)/lib/m68000/libm.a

define make-exe
	$(LD) $(LDFLAGS) -N -Ttext $(ROM_BASE) \
	    -defsym MC68302_BASE=$(MC68302_BASE) \
            -T $(LINKCMDS) -o $(basename $@).exe \
	    $(START_FILE) $(LINK_OBJS) --start-group $(LINK_LIBS) --end-group
	$(NM) -g -n $(basename $@).exe > $(basename $@).num
	$(SIZE) $(basename $@).exe
endef
else
define make-exe
	$(CC) $(CFLAGS) $(CFLAGS_LD) \
	    -Wl,-defsym -Wl,MC68302_BASE=$(MC68302_BASE) \
	    -o $(basename $@).exe $(LINK_OBJS)
	$(NM) -g -n $(basename $@).exe > $(basename $@).num
	$(SIZE) $(basename $@).exe
endef
endif
# Miscellaneous additions go here

ifeq "$(strip $(BSP_VARIANT))" ""
BSP_VARIANT=bare
MC68302_BASE=0x00700000
RAM_BASE=0x00000000
RAM_SIZE=0x00100000

ifeq ($(RTEMS_DEBUGGER),yes)
ROM_BASE=0x00010000
LINKCMDS=$(PROJECT_RELEASE)/lib/debugrom
else
ROM_BASE=0x00C00000
LINKCMDS=$(PROJECT_RELEASE)/lib/rom
endif

ROM_SIZE=0x00100000

else

# pattern match the variant to set the memory map

endif
