#
#  Config file for the PowerPC 604 based mvme2307
#
#  $Id$
#

include $(RTEMS_ROOT)/make/custom/default.cfg

RTEMS_CPU=powerpc
RTEMS_CPU_MODEL=mpc604
RTEMS_PPC_EXCEPTION_PROCESSING_MODEL=new

# This is the actual bsp directory used during the build process.
RTEMS_BSP_FAMILY=motorola_powerpc

#  This section makes the target dependent options file.

#  PPC_VECTOR_FILE_BASE (PowerPC)
#     This defines the base address of the exception table.
#     NOTE: Vectors are actually at 0xFFF00000 but file starts at offset 0x0100
#
#  PPC_USE_SPRG (RTEMS PowerPC port)
#     If defined, then the PowerPC specific code in RTEMS will use some
#     of the special purpose registers to slightly optimize interrupt
#     response time.  The use of these registers can conflict with 
#     other tools like debuggers.
#

define make-target-options
	@echo "#define PPCN_60X_USE_DINK 0"                   >>$@
	@echo "#define PPCN_60X_USE_NONE 1"                   >>$@
	@echo "#define PPC_USE_DATA_CACHE 1"                   >>$@
	@echo "#define PPC_VECTOR_FILE_BASE 0x0100"            >>$@
	@echo "#define PPC_USE_SPRG  1"
endef

#  This contains the compiler options necessary to select the CPU model
#  and (hopefully) optimize for it. 
#
CPU_CFLAGS = -mcpu=604 -mmultiple -mstring -mstrict-align

# optimize flag: typically -0, could use -O4 or -fast
# -O4 is ok for RTEMS
# NOTE: some level of -O may be actually required by inline assembler
#CFLAGS_OPTIMIZE_V=-O4 -fno-keep-inline-functions
CFLAGS_OPTIMIZE_V = -O4

# debug flags: typically none, but at least -O1 is required due to this
# BSP using inlined code
CFLAGS_DEBUG_V = -O1

# profile flags: typically none, but at least -O1 is required due to this
# BSP using inlined code
CFLAGS_PROFILE_V = -O1   

# The following is a linkcmds file which will work without using the
# -specs system in gcc 2.8.
#       $(LD) $(XLDFLAGS) -T $(LINKCMDS) \
#         -o $@ -u atexit -u __vectors -u download_entry $(LINK_FILES)
#       $(LD) $(XLDFLAGS) -Ttext 0x20000 \
#         -o $@ -u atexit -u __vectors -u download_entry $(LINK_FILES)

#       $(CC) -mmvme -mrtems -nostartfiles -mcpu=603 \
#           -o $(basename $@).exe -L $(PROJECT_RELEASE)/lib \
#            $(START_FILE) $(LINK_OBJS) \
#            $(LD_LIBS) \
#           -Wl,-\( -Wl,-lc -Wl,-lrtemsall -Wl,-lgcc -Wl,-\)
define make-exe
	$(LINK.c) $(AM_CFLAGS) $(AM_LDFLAGS) -o $@ $(LINK_OBJS) $(LINK_LIBS)
	$(NM) -g -n $@ > $(basename $@).num
	$(SIZE) $@
#    The following commands make a bootable image but will not work outside
#    the build tree.
#	test -d ${PROJECT_RELEASE}/bin || mkdir ${PROJECT_RELEASE}/bin
#	cp $@ $(PROJECT_ROOT)/powerpc-rtems/c/mvme2307/lib/libbsp/powerpc/$(RTEMS_BSP_FAMILY)/bootloader/$(ARCH); \
#	( cd $(PROJECT_ROOT)/powerpc-rtems/c/mvme2307/lib/libbsp/powerpc/$(RTEMS_BSP_FAMILY)/bootloader; \
#	$(MAKE) bootloader BINARY_LOADED=$@; )
#	f=`basename $@ .exe`; \
#        cp $(PROJECT_ROOT)/powerpc-rtems/c/mvme2307/lib/libbsp/powerpc/$(RTEMS_BSP_FAMILY)/bootloader/bootloader \
#	    ${PROJECT_RELEASE}/bin/$${f}$(LIB_VARIANT).exe \
#	&& chmod 755 \
#	  ${PROJECT_RELEASE}/bin/$${f}$(LIB_VARIANT).exe
endef

# Miscellaneous additions go here

# No start file
START_BASE=
