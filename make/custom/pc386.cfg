#
#  Config file for the PC 386 BSP
#
#  $Id$
#

include $(RTEMS_ROOT)/make/custom/default.cfg

RTEMS_CPU=i386
RTEMS_CPU_MODEL=i386_fp

# This is the actual bsp directory used during the build process.
RTEMS_BSP_FAMILY=pc386

#  This contains the compiler options necessary to select the CPU model
#  and (hopefully) optimize for it. 
#
CPU_CFLAGS = 

# optimize flag: typically -0, could use -O4 or -fast
# -O4 is ok for RTEMS
CFLAGS_OPTIMIZE_V=-O4 -fomit-frame-pointer

# Define this to yes if this target supports multiprocessor environments.
HAS_MP=no

# This target does NOT support the KA9Q TCP/IP stack so ignore requests
# to enable it.
HAS_KA9Q=no

#  This section makes the target dependent options file.

#  NDEBUG (C library)
#     if defined asserts do not generate code.  This is commonly used
#     as a command line option.
#
#  RTEMS_TEST_NO_PAUSE (RTEMS tests)
#     do not pause between screens of output in the rtems tests
#
#  STACK_CHECKER_ON (RTEMS support code)
#     If defined, stack bounds checking is enabled.
#
#  RTEMS_DEBUG (RTEMS)
#     If defined, debug checks in RTEMS and support library code are enabled.

define make-target-options
	@echo "/* #define NDEBUG 1 */ "                     >>$@
	@echo "#define RTEMS_TEST_NO_PAUSE 1"               >>$@
	@echo "/* #define STACK_CHECKER_ON  1 */"           >>$@
	@echo "/* #define RTEMS_DEBUG  1 */"                >>$@
endef

# Here is the rule to actually build a $(ARCH)/foo.exe
# It also builds $(ARCH)/foo.sr and $(ARCH)/foo.nm
# Usage ref: src/tests/sptest/sp1/Makefile

#+--------------------------------------------------------------------------+
#| Relocation address. Set this to the linear address where you want your code
#| to start. It should abide to the following constraints:
#|   RELOCADDR >= 0x10200
#|   RELOCADDR + 'image file size' < 0xA0000
#|   RELOCADDR % 4 = 0 (i.e. aligned on a 4 byte boundary)
#+--------------------------------------------------------------------------+
RELOCADDR=0x00020200

# The following are definitions of make-exe which will work using ld as
# is currently required.  It is expected that as of gcc 2.8, the end user
# will be able to override parts of the compilers specs and link using gcc.

ifeq ($(RTEMS_USE_GCC272),yes)
define make-exe
	$(LD) -N -T $(LINKCMDS) -Ttext $(RELOCADDR) -e start -nostdlib \
           -o $(basename $@).elf \
	   $(START_FILE) $(LINK_OBJS) --start-group $(LINK_LIBS) --end-group
	$(OBJCOPY) -O binary --set-start $(RELOCADDR) $(basename $@).elf $@
	$(PROJECT_TOOLS)/bin2boot -v $@ $(basename $@).bin -s $(RELOCADDR)
	$(NM) -g -n $(basename $@).elf > $(basename $@).num
	$(SIZE) $(basename $@).elf
endef
else
define make-exe
	$(CC) $(CFLAGS) $(CFLAGS_LD) -o $(basename $@).elf $(LINK_OBJS)
	$(OBJCOPY) -O binary --set-start $(RELOCADDR) $(basename $@).elf $@
	$(PROJECT_TOOLS)/bin2boot -v $@ $(basename $@).bin -s $(RELOCADDR)
	$(NM) -g -n $(basename $@).elf > $(basename $@).num
	$(SIZE) $(basename $@).elf
endef
endif

# Miscellaneous additions go here

