#
#  Custom file for "portsw" -- AMD 29205 based board
#
#  $Id$
#

# Specify here the host and target "architectures"
HOST_ARCH=o-$(RTEMS_HOST)
TARGET_ARCH=o-$(RTEMS_BSP)

RTEMS_CPU=a29k
RTEMS_CPU_MODEL=a29205

# This is the actual bsp directory used during the build process.
RTEMS_BSP_FAMILY=portsw

# use the inline functions instead of the macros
# ref: src/exec/generic/Makefile
# Need INLINE_UPCASE set to uppercase value of INLINE variable
#   ref: make/compilers/gcc-force386.cfg
INLINE=macros
INLINE_UPCASE=

# The makefiles all use PROJECT_xxx for variables.
# Ie: $(PROJECT_RELEASE) is the install point.
# Externally, we think of these as "RTEMS" variables.
# Here is where we convert from RTEMS forms to PROJECT forms
# See also make/main.cfg, which derives some more.
PROJECT_ROOT=$(RTEMS_ROOT)/c

# HOST Compiler config file
# You may also want to specify where the compiler resides here.
CC_$(HOST_ARCH)_DIR=$(RTEMS_GNUTOOLS_HOST)
CONFIG.$(HOST_ARCH).CC	 = $(RTEMS_ROOT)/make/compilers/gcc.cfg

## Target compiler config file, if any
CC_$(TARGET_ARCH)_DIR=$(RTEMS_GNUTOOLS)
CONFIG.$(TARGET_ARCH).CC	 = $(RTEMS_ROOT)/make/compilers/gcc-$(RTEMS_BSP).cfg

# Use the LIBC support for CYGNUS newlib
# RTEMS_LIBC_DIR must already be set (by module file)
RTEMS_USE_NEWLIB=yes

# Define this to yes if C++ is included in the development environment.
# This requires that at least the GNU C++ compiler and libg++ be installed.
#
#  Need "main" in BSP so can't link C++ sample test or you will get
#     duplicate symbol errors for main
#
HAS_CPLUSPLUS=no

# Define this to yes if this target supports multiprocessor environments.
HAS_MP=no

# This target does NOT support the TCP/IP stack so ignore requests
# to enable it.
HAS_NETWORKING=no

# Define this to yes if this target wants the posix api
HAS_POSIX_API=no

# Miscellaneous additions go here
