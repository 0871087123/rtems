#
#  Shared compiler for all GNU tools configurations
#
#  $Id$
# 

CPPFLAGS=$(CFLAGS) $(XCPPFLAGS)

CPLUS_CPPFLAGS=$(CFLAGS) $(XCPPFLAGS)

##
# CFLAGS_OPTIMIZE_V, CFLAGS_DEBUG_V, CFLAGS_PROFILE_V are the values we
# would want the corresponding macros to be set to.
#
# CFLAGS_OPTIMIZE, CFLAGS_DEBUG, CFLAGS_PROFILE are set in the leaf
# Makefiles by the 'debug:' and 'profile:' targets to their _V values.
#

# default flags

# We only include the header files for KA9Q if it is enabled.
INCLUDE_KA9Q_yes_V = -I$(PROJECT_INCLUDE)/ka9q
INCLUDE_KA9Q = $(INCLUDE_KA9Q_$(HAS_KA9Q)_V)

ifeq ($(RTEMS_USE_GCC272),yes)
ifeq ($(RTEMS_CROSS_TARGET),no)

ifdef RTEMS_LIBC_DIR
RTEMS_LIBC_INCLUDES := -I$(RTEMS_LIBC_DIR)/include
endif

# Used for posix bsps
CFLAGS_DEFAULT = $(CPU_DEFINES) $(CPU_CFLAGS) -Wall -ansi -fasm -g \
  -I$(PROJECT_INCLUDE) \
  $(INCLUDE_KA9Q) \
  $(RTEMS_LIBC_INCLUDES) $(DEFINES)

ASMFLAGS=$(CPU_DEFINES) $(CPU_CFLAGS) -g \
  -I$(PROJECT_INCLUDE) \
  $(RTEMS_LIBC_INCLUDES) $(DEFINES)
else
# Used for embedded bsps
# Ask gcc where it finds its own include files
GCC_INCLUDE=$(shell $(CC) $(CPU_CFLAGS) -print-file-name=include $(GCCSED))

CFLAGS_DEFAULT = $(CPU_DEFINES) $(CPU_CFLAGS) -Wall -ansi -fasm -g \
  -nostdinc -I$(PROJECT_INCLUDE) \
  $(INCLUDE_KA9Q) \
  -I$(RTEMS_LIBC_DIR)/include -I$(GCC_INCLUDE) $(DEFINES)

ASMFLAGS=$(CPU_DEFINES) $(CPU_CFLAGS) -g \
  -nostdinc -I$(PROJECT_INCLUDE) \
  -I$(RTEMS_LIBC_DIR)/include -I$(GCC_INCLUDE) $(DEFINES)
endif

# default location of Standard C Library
ifndef LIBC_LIBC
LIBC_LIBC=$(RTEMS_LIBC_DIR)/lib/libc.a
endif

ifndef LIBC_LIBM
LIBC_LIBM=$(RTEMS_LIBC_DIR)/lib/libm.a
endif

else
CFLAGS_DEFAULT = $(CPU_DEFINES) $(CPU_CFLAGS) -Wall -ansi -fasm -g \
	-B$(PROJECT_RELEASE)/lib/ -specs bsp_specs -qrtems \
        $(INCLUDE_KA9Q) $(DEFINES)

ASMFLAGS=$(CPU_DEFINES) $(CPU_CFLAGS) -g -I$(srcdir) \
	-B$(PROJECT_RELEASE)/lib/ -specs bsp_specs -qrtems $(DEFINES)

# default location of Standard C Library
ifndef LIBC_LIBC
LIBC_LIBC=$(shell $(CC) $(CPU_CFLAGS) -print-file-name=libc.a $(GCCSED))
endif

ifndef LIBC_LIBM
LIBC_LIBM=$(shell $(CC) $(CPU_CFLAGS) -print-file-name=libm.a $(GCCSED))
endif
endif

# Define this to yes if C++ is included in the development environment.
# This requires that at least the GNU C++ compiler and libg++ be installed.
ifeq ($(RTEMS_HAS_CPLUSPLUS),yes)
HAS_CPLUSPLUS=yes
CPLUS_LD_LIBS += $(PROJECT_RELEASE)/lib/librtems++$(LIBSUFFIX_VA)
else
HAS_CPLUSPLUS=no
endif

# debug flag;
CFLAGS_DEBUG_V+=-Wno-unused

ifeq ($(RTEMS_USE_GCC272),no)
CFLAGS_DEBUG_V+=-qrtems_debug
endif

# when debugging, optimize flag: typically empty
# some compilers do allow optimization with their "-g"
#CFLAGS_DEBUG_OPTIMIZE_V=

# profile flag; use gprof(1)
CFLAGS_PROFILE_V=-pg

# default is to optimize
CFLAGS_OPTIMIZE=$(CFLAGS_OPTIMIZE_V)

# dynamic libraries
CFLAGS_DYNAMIC_V=-fpic
#ASFLAGS_DYNAMIC_V=

CFLAGS=$(CFLAGS_DEFAULT) $(CFLAGS_OPTIMIZE) $(CFLAGS_DEBUG) $(CFLAGS_PROFILE)

# List of library paths without -L
LD_PATHS= $(PROJECT_RELEASE)/lib

# libraries you want EVERYONE to link with
#LD_LIBS=

# ld flag to ensure pure-text
#LDFLAGS_MUST_BE_PURE_V =

# ld flag for [un]shared objects
#LDFLAGS_STATIC_LIBRARIES_V =
#LDFLAGS_SHARED_LIBRARIES_V =

# ld flag for incomplete link
LDFLAGS_INCOMPLETE = -r

# Special linker options when building lib.so
LDFLAGS_DYNAMIC_V = ??

# Some dynamic linking systems want the preferred name recorded in the binary
# ref: src/libxil/Makefile
LDFLAGS_DYNAMIC_LIBNAME_V = -h $(DYNAMIC_VERSION_LIBNAME)

# ld flags for profiling, debugging
LDFLAGS_PROFILE_V =
LDFLAGS_DEBUG_V =

LDFLAGS=$(LDFLAGS_PROFILE) $(LDFLAGS_DEBUG) $(LD_PATHS:%=-L %)

#
# Stuff to clean and clobber for the compiler and its tools
#

CLEAN_CC = a.out *.o *.BAK
CLOBBER_CC =

#
# Client compiler and support tools
#

# CPP command to write file to standard output
CPP=$(CC) -E -ansi -w -Wp,-$$

# flags set by cc when running cpp
CPP_CC_FLAGS=-D__STDC__

ASFLAGS=
ASM4FLAGS := -I $(PROJECT_INCLUDE)

# egrep regexp to ignore symbol table entries in ar archives.
# Only used to make sure we skip them when coalescing libraries.
# skip __.SYMDEF and empty names (maybe bug in ranlib??).
AR_SYMBOL_TABLE="HIGHLY-UNLIKELY-TO-CONFLICT"
ARFLAGS=ruv

#
# Command to convert a normal archive to one searchable by $(LD)
#
# NOTE: Obsolete, use $(RANLIB) instead, MKLIB may disappear soon 
MKLIB=$(RANLIB)

#
# How to compile stuff into ${ARCH} subdirectory
#
# NOTE: we override COMPILE.c
#

COMPILE.c=$(CC) $(CFLAGS) $(XCFLAGS) -c
COMPILE.cc=$(CXX) $(CFLAGS) $(CXXFLAGS) -fno-rtti $(XCFLAGS) -c

${ARCH}/%.o: %.c
	${COMPILE.c} -o $@ $<

${ARCH}/%.o: %.cc
	${COMPILE.cc} -o $@ $<

${ARCH}/%.o: %.S
	${COMPILE.c} -DASM -o $@ $<

# strip out C++ style comments.
${ARCH}/%.o: %.s
	sed -e 's/\/\/.*$$//' < $< | \
	    $(CPP) $(ASMFLAGS) -I. -I$(srcdir) -DASM - >$(ARCH)/$*.i
	$(AS) $(ASFLAGS) -o $@ $(ARCH)/$*.i

#	$(CPP) $(CPPFLAGS) -DASM - < $<  >$(ARCH)/$*.i
#	$(AS) $(ASFLAGS) -o $@ $(ARCH)/$*.i
#	$(RM) $(ARCH)/$*.i

# Specify our own default rule for this to prevent having CFLAGS and
#  CPPFLAGS being passed to linker
#
#
# NOTE (Ralf): Having this rule is a bug, IMO.
# I have only kept it for the moment because some (broken) Makefiles 
# might need it.
#
# ${ARCH}/%: ${ARCH}/%.o
#	${CC} ${LDFLAGS} -o $@ $@.o ${LD_LIBS}
#
# Anyway, the rule above is wrong. The one below should be correct
# (But this one should also not be necessary. If something breaks now,
# have a look at the Makefile or custom/*.cfg :-)
# $(ARCH)/%.exe: $(ARCH)/%.o
#	$(make-exe)

# Make foo.rel from foo.o
${ARCH}/%.rel: ${ARCH}/%.o
	${LD} $(LDFLAGS_INCOMPLETE) -o $@ $^

# create $(ARCH)/pgm from pgm.sh
${ARCH}/%: %.sh
	$(RM) $@
	$(CP) $< $@
	$(CHMOD) +x $@

# Dependency files for use by gmake
# NOTE: we don't put in $(TARGET_ARCH)
#       so that 'make clean' doesn't blow it away

DEPEND=Depends-$(TARGET_ARCH:o-%=%)

CLEAN_DEPEND=$(DEPEND).tmp
CLOBBER_DEPEND=$(DEPEND)

# We deliberately don't have anything depend on the
# $(DEPEND) file; otherwise it will get rebuilt even
# on 'make clean'
#

depend: $(C_FILES) $(CC_FILES) $(S_FILES)
ifneq ($(words $(C_FILES) $(CC_FILES) $(S_FILES)), 0)
#       Use gcc -M to generate dependencies
#       Replace foo.o with $(ARCH)/foo.o
#       Replace $(ARCH) value with string $(ARCH)
#           so that it will for debug and profile cases
	$(COMPILE.c) -M   $^    |  \
	$(SED) -e 's?^\(.*\)\.o[ ]*:?$$(ARCH)/\1.o:?' \
	    -e 's?$(ARCH)/?$$(ARCH)/?'   >$(DEPEND).tmp
	$(MV) $(DEPEND).tmp $(DEPEND)
endif

# spell out all the LINK_FILE's, rather than using -lbsp, so
#  that $(LINK_FILES) can be a dependency

# Start file must be one of
#    $(PROJECT_RELEASE)/lib/start$(LIB_VARIANT).o
#    $(PROJECT_RELEASE)/lib/asmiface$(LIB_VARIANT).o
# It defaults to start.o, but an app can override it.

ifeq ($(START_BASE),)
  START_FILE=
else
  START_FILE=$(PROJECT_RELEASE)/lib/$(START_BASE)$(LIB_VARIANT).o
endif

CONSTRUCTOR=

LIBC_LOW=

ifndef LIBGCC
LIBGCC = $(shell $(CC) $(CFLAGS) -print-libgcc-file-name $(GCCSED))
endif

#
# NOTE: a rule to link an rtems' application should look similar to this
#       (cf. "make-exe" in make/custom/*.cfg): 
#
# gcc27:
# $(PGM): $(LINK_FILES)
#	$(LD) $(LDFLAGS) -o $@ $(LINK_OBJS) \
#	--start-group $(LINK_LIBS) --end-group
#
# gcc28:
# $(PGM): $(LINK_FILES)
#	$(CC) $(CFLAGS) -o $@ $(LINK_OBJS) $(LINK_LIBS)
#

LINK_OBJS =\
    $(CONSTRUCTOR) \
    $(OBJS) \
    $(MANAGERS_NOT_WANTED:%=$(PROJECT_RELEASE)/lib/no-%$(LIB_VARIANT).rel) \
    $(PROJECT_RELEASE)/lib/libtest$(LIBSUFFIX_VA)

LINK_FILES =\
    $(START_FILE) \
    $(CONSTRUCTOR) \
    $(OBJS) \
    $(MANAGERS_NOT_WANTED:%=$(PROJECT_RELEASE)/lib/no-%$(LIB_VARIANT).rel) \
    $(PROJECT_RELEASE)/lib/libtest$(LIBSUFFIX_VA) \
    $(PROJECT_RELEASE)/lib/librtemsall$(LIBSUFFIX_VA)

ifeq ($(RTEMS_USE_GCC272),yes)
LINK_LIBS = $(PROJECT_RELEASE)/lib/librtemsall$(LIBSUFFIX_VA)
ifeq ($(RTEMS_CROSS_TARGET),yes)
# NOTE: add libc and libgcc only for embedded targets
#       LIBC_LIBM should not be needed by rtems itself.
# FIXME: If a BSP requires libm, its make/custom/*.cfg file should add
#        LIBC_LIBM to LINK_LIBS (untested)
LINK_LIBS += $(LIBC_LIBC) $(LIBGCC)
endif
endif

LINK_LIBS += $(LD_LIBS)    

#
# Allow user to override link commands (to build a prom image, perhaps)
#
ifndef LINKCMDS
LINKCMDS=$(PROJECT_RELEASE)/lib/linkcmds
endif


define make-rel
	$(LD) $(LDFLAGS_INCOMPLETE) $(XLDFLAGS) -o $@ $(OBJS)
endef
